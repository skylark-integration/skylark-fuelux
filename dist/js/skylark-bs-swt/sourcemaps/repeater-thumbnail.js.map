{"version":3,"sources":["repeater-thumbnail.js"],"names":["define","langx","browser","eventer","noder","geom","$","fillTemplate","itemData","template","replace","end","start","val","indexOf","trim","substring","undefined","invalid","search","fn","repeater","Constructor","prototype","thumbnail_clearSelectedItems","this","$canvas","find","removeClass","thumbnail_getSelectedItems","selected","each","push","thumbnail_setSelectedItems","items","force","compareItemIndex","n","i","index","$item","compareItemSelector","is","selector","selectItem","$itm","select","selectable","self","addClass","l","viewOptions","thumbnail_selectable","isArray","length","defaults","mixin","thumbnail_alignment","thumbnail_infiniteScroll","thumbnail_itemRendered","thumbnail_noItemsHTML","thumbnail_template","viewTypes","thumbnail","opts","infScroll","infiniteScrolling","before","helpers","$empty","validAlignments","alignment","$cont","data","response","center","justify","left","right","thumbnail_injectSpacers","item","action","append","remove","renderItem","$thumbnail","subset","on","isDisabled","hasClass","$element","trigger","container","after"],"mappings":"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","file":"../repeater-thumbnail.js","sourcesContent":["define([\n    \"skylark-utils/langx\",\n    \"skylark-utils/browser\",\n    \"skylark-utils/eventer\",\n    \"skylark-utils/noder\",\n    \"skylark-utils/geom\",\n    \"skylark-utils/query\",\n    \"./repeater\"\n], function(langx, browser, eventer, noder, geom, $) {\n\n    /*\n     * Fuel UX Checkbox\n     * https://github.com/ExactTarget/fuelux\n     *\n     * Copyright (c) 2014 ExactTarget\n     * Licensed under the BSD New license.\n     */\n\n    if ($.fn.repeater) {\n        //ADDITIONAL METHODS\n        $.fn.repeater.Constructor.prototype.thumbnail_clearSelectedItems = function() {\n            this.$canvas.find('.repeater-thumbnail-cont .selectable.selected').removeClass('selected');\n        };\n\n        $.fn.repeater.Constructor.prototype.thumbnail_getSelectedItems = function() {\n            var selected = [];\n            this.$canvas.find('.repeater-thumbnail-cont .selectable.selected').each(function() {\n                selected.push($(this));\n            });\n            return selected;\n        };\n\n        $.fn.repeater.Constructor.prototype.thumbnail_setSelectedItems = function(items, force) {\n            var selectable = this.viewOptions.thumbnail_selectable;\n            var self = this;\n            var i, $item, l, n;\n\n            //this function is necessary because lint yells when a function is in a loop\n            function compareItemIndex() {\n                if (n === items[i].index) {\n                    $item = $(this);\n                    return false;\n                } else {\n                    n++;\n                }\n            }\n\n            //this function is necessary because lint yells when a function is in a loop\n            function compareItemSelector() {\n                $item = $(this);\n                if ($item.is(items[i].selector)) {\n                    selectItem($item, items[i].selected);\n                }\n            }\n\n            function selectItem($itm, select) {\n                select = (select !== undefined) ? select : true;\n                if (select) {\n                    if (!force && selectable !== 'multi') {\n                        self.thumbnail_clearSelectedItems();\n                    }\n\n                    $itm.addClass('selected');\n                } else {\n                    $itm.removeClass('selected');\n                }\n            }\n\n            if (!$.isArray(items)) {\n                items = [items];\n            }\n\n            if (force === true || selectable === 'multi') {\n                l = items.length;\n            } else if (selectable) {\n                l = (items.length > 0) ? 1 : 0;\n            } else {\n                l = 0;\n            }\n\n            for (i = 0; i < l; i++) {\n                if (items[i].index !== undefined) {\n                    $item = $();\n                    n = 0;\n                    this.$canvas.find('.repeater-thumbnail-cont .selectable').each(compareItemIndex);\n                    if ($item.length > 0) {\n                        selectItem($item, items[i].selected);\n                    }\n\n                } else if (items[i].selector) {\n                    this.$canvas.find('.repeater-thumbnail-cont .selectable').each(compareItemSelector);\n                }\n            }\n        };\n\n        //ADDITIONAL DEFAULT OPTIONS\n        $.fn.repeater.defaults = langx.mixin({}, $.fn.repeater.defaults, {\n            thumbnail_alignment: 'left',\n            thumbnail_infiniteScroll: false,\n            thumbnail_itemRendered: null,\n            thumbnail_noItemsHTML: 'no items found',\n            thumbnail_selectable: false,\n            thumbnail_template: '<div class=\"thumbnail repeater-thumbnail\"><img height=\"75\" src=\"{{src}}\" width=\"65\"><span>{{name}}</span></div>'\n        });\n\n        //EXTENSION DEFINITION\n        $.fn.repeater.viewTypes.thumbnail = {\n            selected: function() {\n                var infScroll = this.viewOptions.thumbnail_infiniteScroll;\n                var opts;\n                if (infScroll) {\n                    opts = (typeof infScroll === 'object') ? infScroll : {};\n                    this.infiniteScrolling(true, opts);\n                }\n            },\n            before: function(helpers) {\n                var alignment = this.viewOptions.thumbnail_alignment;\n                var $cont = this.$canvas.find('.repeater-thumbnail-cont');\n                var data = helpers.data;\n                var response = {};\n                var $empty, validAlignments;\n\n                if ($cont.length < 1) {\n                    $cont = $('<div class=\"clearfix repeater-thumbnail-cont\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>');\n                    if (alignment && alignment !== 'none') {\n                        validAlignments = {\n                            'center': 1,\n                            'justify': 1,\n                            'left': 1,\n                            'right': 1\n                        };\n                        alignment = (validAlignments[alignment]) ? alignment : 'justify';\n                        $cont.addClass('align-' + alignment);\n                        this.thumbnail_injectSpacers = true;\n                    } else {\n                        this.thumbnail_injectSpacers = false;\n                    }\n                    response.item = $cont;\n                } else {\n                    response.action = 'none';\n                }\n\n                if (data.items && data.items.length < 1) {\n                    $empty = $('<div class=\"empty\"></div>');\n                    $empty.append(this.viewOptions.thumbnail_noItemsHTML);\n                    $cont.append($empty);\n                } else {\n                    $cont.find('.empty:first').remove();\n                }\n\n                return response;\n            },\n            renderItem: function(helpers) {\n                var selectable = this.viewOptions.thumbnail_selectable;\n                var selected = 'selected';\n                var self = this;\n                var $thumbnail = $(fillTemplate(helpers.subset[helpers.index], this.viewOptions.thumbnail_template));\n\n                $thumbnail.data('item_data', helpers.data.items[helpers.index]);\n\n                if (selectable) {\n                    $thumbnail.addClass('selectable');\n                    $thumbnail.on('click', function() {\n                        if (self.isDisabled) return;\n\n                        if (!$thumbnail.hasClass(selected)) {\n                            if (selectable !== 'multi') {\n                                self.$canvas.find('.repeater-thumbnail-cont .selectable.selected').each(function() {\n                                    var $itm = $(this);\n                                    $itm.removeClass(selected);\n                                    self.$element.trigger('deselected.fu.repeaterThumbnail', $itm);\n                                });\n                            }\n\n                            $thumbnail.addClass(selected);\n                            self.$element.trigger('selected.fu.repeaterThumbnail', $thumbnail);\n                        } else {\n                            $thumbnail.removeClass(selected);\n                            self.$element.trigger('deselected.fu.repeaterThumbnail', $thumbnail);\n                        }\n                    });\n                }\n\n                helpers.container.append($thumbnail);\n                if (this.thumbnail_injectSpacers) {\n                    $thumbnail.after('<span class=\"spacer\">&nbsp;</span>');\n                }\n\n                if (this.viewOptions.thumbnail_itemRendered) {\n                    this.viewOptions.thumbnail_itemRendered({\n                        container: helpers.container,\n                        item: $thumbnail,\n                        itemData: helpers.subset[helpers.index]\n                    }, function() {});\n                }\n\n                return false;\n            }\n        };\n    }\n\n    //ADDITIONAL METHODS\n    function fillTemplate(itemData, template) {\n        var invalid = false;\n\n        function replace() {\n            var end, start, val;\n\n            start = template.indexOf('{{');\n            end = template.indexOf('}}', start + 2);\n\n            if (start > -1 && end > -1) {\n                val = langx.trim(template.substring(start + 2, end));\n                val = (itemData[val] !== undefined) ? itemData[val] : '';\n                template = template.substring(0, start) + val + template.substring(end + 2);\n            } else {\n                invalid = true;\n            }\n        }\n\n        while (!invalid && template.search('{{') >= 0) {\n            replace(template);\n        }\n\n        return template;\n    }\n\n});"]}