{"version":3,"sources":["button.js"],"names":["define","browser","langx","eventer","$","Plugin","option","this","each","$this","wgt","data","options","Button","toggle","setState","element","$el","$element","mixin","DEFAULTS","isLoading","closest","on","proxy","e","target","is","preventDefault","$btn","trigger","find","first","VERSION","loadingText","prototype","state","d","val","resetText","setTimeout","addClass","attr","prop","removeClass","removeAttr","changed","$parent","length","$input","hasClass","toggleClass","old","fn","button","Constructor","noConflict"],"mappings":";;;;;;;AAAAA,QACE,wBACA,sBACA,wBACA,uBACA,SAASC,EAAQC,EAAMC,EAAQC,GAS/B,YAsFA,SAASC,GAAOC,GACd,MAAOC,MAAKC,KAAK,WACf,GAAIC,GAAUL,EAAEG,MACZG,EAASD,EAAME,KAAK,aACpBC,EAA2B,gBAAVN,IAAsBA,CAEtCI,IACHD,EAAME,KAAK,YAAcD,EAAM,GAAIG,GAAON,KAAMK,IAGpC,UAAVN,EACFI,EAAII,SACKR,GACTI,EAAIK,SAAST,KA9FnB,GAAIO,GAAS,SAAUG,EAASJ,GAC9B,GAAIK,GAAMV,KAAKW,SAAYd,EAAEY,EAC7BT,MAAKK,QAAYV,EAAMiB,SAAUN,EAAOO,SAAUR,GAClDL,KAAKc,WAAY,EAEbJ,EAAIK,QAAQ,4BACdL,EAAIM,GAAG,2BAA2BrB,EAAMsB,MAAM,SAASC,GAGrD,GAFAlB,KAAKO,UAECV,EAAEqB,EAAEC,QAAQC,GAAG,+CAAiD,CAEpEF,EAAEG,gBAEF,IAAIC,GAAOtB,KAAKW,QACZW,GAAKF,GAAG,gBACVE,EAAKC,QAAQ,SAEbD,EAAKE,KAAK,gCAAgCC,QAAQF,QAAQ,WAG9DvB,OAKNM,GAAOoB,QAAW,QAElBpB,EAAOO,UACLc,YAAa,cAGfrB,EAAOsB,UAAUpB,SAAW,SAAUqB,GACpC,GAAIC,GAAO,WACPpB,EAAOV,KAAKW,SACZoB,EAAOrB,EAAIU,GAAG,SAAW,MAAQ,OACjChB,EAAOM,EAAIN,MAEfyB,IAAS,OAEa,MAAlBzB,EAAK4B,WAAmBtB,EAAIN,KAAK,YAAaM,EAAIqB,MAGtDE,WAAWtC,EAAMsB,MAAM,WACrBP,EAAIqB,GAAoB,MAAf3B,EAAKyB,GAAiB7B,KAAKK,QAAQwB,GAASzB,EAAKyB,IAE7C,eAATA,GACF7B,KAAKc,WAAY,EACjBJ,EAAIwB,SAASJ,GAAGK,KAAKL,EAAGA,GAAGM,KAAKN,GAAG,IAC1B9B,KAAKc,YACdd,KAAKc,WAAY,EACjBJ,EAAI2B,YAAYP,GAAGQ,WAAWR,GAAGM,KAAKN,GAAG,KAE1C9B,MAAO,IAGZM,EAAOsB,UAAUrB,OAAS,WACxB,GAAIgC,IAAU,EACVC,EAAUxC,KAAKW,SAASI,QAAQ,0BAEpC,IAAIyB,EAAQC,OAAQ,CAClB,GAAIC,GAAS1C,KAAKW,SAASa,KAAK,QACL,UAAvBkB,EAAON,KAAK,SACVM,EAAON,KAAK,aAAYG,GAAU,GACtCC,EAAQhB,KAAK,WAAWa,YAAY,UACpCrC,KAAKW,SAASuB,SAAS,WACS,YAAvBQ,EAAON,KAAK,UAChBM,EAAON,KAAK,aAAgBpC,KAAKW,SAASgC,SAAS,YAAWJ,GAAU,GAC7EvC,KAAKW,SAASiC,YAAY,WAE5BF,EAAON,KAAK,UAAWpC,KAAKW,SAASgC,SAAS,WAC1CJ,GAASG,EAAOnB,QAAQ,cAE5BvB,MAAKW,SAASwB,KAAK,gBAAiBnC,KAAKW,SAASgC,SAAS,WAC3D3C,KAAKW,SAASiC,YAAY,UAyB9B,IAAIC,GAAMhD,EAAEiD,GAAGC,MAmCf,OAjCAlD,GAAEiD,GAAGC,OAAqBjD,EAC1BD,EAAEiD,GAAGC,OAAOC,YAAc1C,EAM1BT,EAAEiD,GAAGC,OAAOE,WAAa,WAEvB,MADApD,GAAEiD,GAAGC,OAASF,EACP7C,MAwBFM","file":"../button.js","sourcesContent":["define([\n  \"skylark-utils/browser\",\n  \"skylark-utils/langx\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/query\"\n],function(browser,langx,eventer,$){\n/* ========================================================================\n * Bootstrap: button.js v3.3.7\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    var $el = this.$element  = $(element)\n    this.options   = langx.mixin({}, Button.DEFAULTS, options)\n    this.isLoading = false\n\n    if ($el.closest('[data-toggle^=\"button\"]')) {\n      $el.on(\"click.bs.button.data-api\",langx.proxy(function(e){\n        this.toggle()\n\n        if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n          // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n          e.preventDefault()\n          // The target component still receive the focus\n          var $btn = this.$element; \n          if ($btn.is('input,button')) {\n            $btn.trigger('focus');\n          } else {\n            $btn.find('input:visible,button:visible').first().trigger('focus');\n          }\n        }\n      },this));\n    }\n\n  }\n\n  Button.VERSION  = '3.3.7'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n  Button.prototype.setState = function (state) {\n    var d    = 'disabled'\n    var $el  = this.$element\n    var val  = $el.is('input') ? 'val' : 'html'\n    var data = $el.data()\n\n    state += 'Text'\n\n    if (data.resetText == null) $el.data('resetText', $el[val]())\n\n    // push to event loop to allow forms to submit\n    setTimeout(langx.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state])\n\n      if (state == 'loadingText') {\n        this.isLoading = true\n        $el.addClass(d).attr(d, d).prop(d, true)\n      } else if (this.isLoading) {\n        this.isLoading = false\n        $el.removeClass(d).removeAttr(d).prop(d, false)\n      }\n    }, this), 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var changed = true\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n    if ($parent.length) {\n      var $input = this.$element.find('input')\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false\n        $parent.find('.active').removeClass('active')\n        this.$element.addClass('active')\n      } else if ($input.prop('type') == 'checkbox') {\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n        this.$element.toggleClass('active')\n      }\n      $input.prop('checked', this.$element.hasClass('active'))\n      if (changed) $input.trigger('change')\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n      this.$element.toggleClass('active')\n    }\n  }\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var wgt    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!wgt) {\n        $this.data('bs.button', (wgt = new Button(this, options)));\n      }\n\n      if (option == 'toggle') {\n        wgt.toggle();\n      } else if (option) {\n        wgt.setState(option);\n      }\n    });\n  }\n  var old = $.fn.button\n\n  $.fn.button             = Plugin\n  $.fn.button.Constructor = Button\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old\n    return this\n  }\n\n\n  // BUTTON DATA-API\n  // ===============\n  /*  \n  $(document)\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      var $btn = $(e.target).closest('.btn')\n      Plugin.call($btn, 'toggle')\n      if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n        e.preventDefault()\n        // The target component still receive the focus\n        if ($btn.is('input,button')) $btn.trigger('focus')\n        else $btn.find('input:visible,button:visible').first().trigger('focus')\n      }\n    })\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n    })\n  */\n\n  return Button;\n});\n"]}