{"version":3,"sources":["repeater-thumbnail.js"],"names":["define","langx","browser","eventer","noder","geom","$","fn","repeater","Constructor","prototype","thumbnail_clearSelectedItems","this","$canvas","find","removeClass","thumbnail_getSelectedItems","selected","each","push","thumbnail_setSelectedItems","items","force","i","$item","l","n","selectable","viewOptions","thumbnail_selectable","self","compareItemIndex","index","compareItemSelector","is","selector","selectItem","$itm","select","undefined","addClass","isArray","length","defaults","mixin","thumbnail_alignment","thumbnail_infiniteScroll","thumbnail_itemRendered","thumbnail_noItemsHTML","thumbnail_template","viewTypes","thumbnail","opts","infScroll","infiniteScrolling","before","helpers","$empty","alignment","$cont","data","response","center","justify","left","right","thumbnail_injectSpacers","item","action","append","remove","renderItem","$thumbnail","itemData","template","invalid","replace","end","start","val","indexOf","trim","substring","search","fillTemplate","subset","on","isDisabled","hasClass","$element","trigger","container","after"],"mappings":"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","file":"../repeater-thumbnail.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx/browser\",\r\n    \"skylark-domx/eventer\",\r\n    \"skylark-domx/noder\",\r\n    \"skylark-domx/geom\",\r\n    \"skylark-domx/query\",\r\n    \"./repeater\"\r\n], function(langx, browser, eventer, noder, geom, $) {\r\n\r\n    /*\r\n     * Fuel UX Checkbox\r\n     * https://github.com/ExactTarget/fuelux\r\n     *\r\n     * Copyright (c) 2014 ExactTarget\r\n     * Licensed under the BSD New license.\r\n     */\r\n\r\n    if ($.fn.repeater) {\r\n        //ADDITIONAL METHODS\r\n        $.fn.repeater.Constructor.prototype.thumbnail_clearSelectedItems = function() {\r\n            this.$canvas.find('.repeater-thumbnail-cont .selectable.selected').removeClass('selected');\r\n        };\r\n\r\n        $.fn.repeater.Constructor.prototype.thumbnail_getSelectedItems = function() {\r\n            var selected = [];\r\n            this.$canvas.find('.repeater-thumbnail-cont .selectable.selected').each(function() {\r\n                selected.push($(this));\r\n            });\r\n            return selected;\r\n        };\r\n\r\n        $.fn.repeater.Constructor.prototype.thumbnail_setSelectedItems = function(items, force) {\r\n            var selectable = this.viewOptions.thumbnail_selectable;\r\n            var self = this;\r\n            var i, $item, l, n;\r\n\r\n            //this function is necessary because lint yells when a function is in a loop\r\n            function compareItemIndex() {\r\n                if (n === items[i].index) {\r\n                    $item = $(this);\r\n                    return false;\r\n                } else {\r\n                    n++;\r\n                }\r\n            }\r\n\r\n            //this function is necessary because lint yells when a function is in a loop\r\n            function compareItemSelector() {\r\n                $item = $(this);\r\n                if ($item.is(items[i].selector)) {\r\n                    selectItem($item, items[i].selected);\r\n                }\r\n            }\r\n\r\n            function selectItem($itm, select) {\r\n                select = (select !== undefined) ? select : true;\r\n                if (select) {\r\n                    if (!force && selectable !== 'multi') {\r\n                        self.thumbnail_clearSelectedItems();\r\n                    }\r\n\r\n                    $itm.addClass('selected');\r\n                } else {\r\n                    $itm.removeClass('selected');\r\n                }\r\n            }\r\n\r\n            if (!$.isArray(items)) {\r\n                items = [items];\r\n            }\r\n\r\n            if (force === true || selectable === 'multi') {\r\n                l = items.length;\r\n            } else if (selectable) {\r\n                l = (items.length > 0) ? 1 : 0;\r\n            } else {\r\n                l = 0;\r\n            }\r\n\r\n            for (i = 0; i < l; i++) {\r\n                if (items[i].index !== undefined) {\r\n                    $item = $();\r\n                    n = 0;\r\n                    this.$canvas.find('.repeater-thumbnail-cont .selectable').each(compareItemIndex);\r\n                    if ($item.length > 0) {\r\n                        selectItem($item, items[i].selected);\r\n                    }\r\n\r\n                } else if (items[i].selector) {\r\n                    this.$canvas.find('.repeater-thumbnail-cont .selectable').each(compareItemSelector);\r\n                }\r\n            }\r\n        };\r\n\r\n        //ADDITIONAL DEFAULT OPTIONS\r\n        $.fn.repeater.defaults = langx.mixin({}, $.fn.repeater.defaults, {\r\n            thumbnail_alignment: 'left',\r\n            thumbnail_infiniteScroll: false,\r\n            thumbnail_itemRendered: null,\r\n            thumbnail_noItemsHTML: 'no items found',\r\n            thumbnail_selectable: false,\r\n            thumbnail_template: '<div class=\"thumbnail repeater-thumbnail\"><img height=\"75\" src=\"{{src}}\" width=\"65\"><span>{{name}}</span></div>'\r\n        });\r\n\r\n        //EXTENSION DEFINITION\r\n        $.fn.repeater.viewTypes.thumbnail = {\r\n            selected: function() {\r\n                var infScroll = this.viewOptions.thumbnail_infiniteScroll;\r\n                var opts;\r\n                if (infScroll) {\r\n                    opts = (typeof infScroll === 'object') ? infScroll : {};\r\n                    this.infiniteScrolling(true, opts);\r\n                }\r\n            },\r\n            before: function(helpers) {\r\n                var alignment = this.viewOptions.thumbnail_alignment;\r\n                var $cont = this.$canvas.find('.repeater-thumbnail-cont');\r\n                var data = helpers.data;\r\n                var response = {};\r\n                var $empty, validAlignments;\r\n\r\n                if ($cont.length < 1) {\r\n                    $cont = $('<div class=\"clearfix repeater-thumbnail-cont\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>');\r\n                    if (alignment && alignment !== 'none') {\r\n                        validAlignments = {\r\n                            'center': 1,\r\n                            'justify': 1,\r\n                            'left': 1,\r\n                            'right': 1\r\n                        };\r\n                        alignment = (validAlignments[alignment]) ? alignment : 'justify';\r\n                        $cont.addClass('align-' + alignment);\r\n                        this.thumbnail_injectSpacers = true;\r\n                    } else {\r\n                        this.thumbnail_injectSpacers = false;\r\n                    }\r\n                    response.item = $cont;\r\n                } else {\r\n                    response.action = 'none';\r\n                }\r\n\r\n                if (data.items && data.items.length < 1) {\r\n                    $empty = $('<div class=\"empty\"></div>');\r\n                    $empty.append(this.viewOptions.thumbnail_noItemsHTML);\r\n                    $cont.append($empty);\r\n                } else {\r\n                    $cont.find('.empty:first').remove();\r\n                }\r\n\r\n                return response;\r\n            },\r\n            renderItem: function(helpers) {\r\n                var selectable = this.viewOptions.thumbnail_selectable;\r\n                var selected = 'selected';\r\n                var self = this;\r\n                var $thumbnail = $(fillTemplate(helpers.subset[helpers.index], this.viewOptions.thumbnail_template));\r\n\r\n                $thumbnail.data('item_data', helpers.data.items[helpers.index]);\r\n\r\n                if (selectable) {\r\n                    $thumbnail.addClass('selectable');\r\n                    $thumbnail.on('click', function() {\r\n                        if (self.isDisabled) return;\r\n\r\n                        if (!$thumbnail.hasClass(selected)) {\r\n                            if (selectable !== 'multi') {\r\n                                self.$canvas.find('.repeater-thumbnail-cont .selectable.selected').each(function() {\r\n                                    var $itm = $(this);\r\n                                    $itm.removeClass(selected);\r\n                                    self.$element.trigger('deselected.fu.repeaterThumbnail', $itm);\r\n                                });\r\n                            }\r\n\r\n                            $thumbnail.addClass(selected);\r\n                            self.$element.trigger('selected.fu.repeaterThumbnail', $thumbnail);\r\n                        } else {\r\n                            $thumbnail.removeClass(selected);\r\n                            self.$element.trigger('deselected.fu.repeaterThumbnail', $thumbnail);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                helpers.container.append($thumbnail);\r\n                if (this.thumbnail_injectSpacers) {\r\n                    $thumbnail.after('<span class=\"spacer\">&nbsp;</span>');\r\n                }\r\n\r\n                if (this.viewOptions.thumbnail_itemRendered) {\r\n                    this.viewOptions.thumbnail_itemRendered({\r\n                        container: helpers.container,\r\n                        item: $thumbnail,\r\n                        itemData: helpers.subset[helpers.index]\r\n                    }, function() {});\r\n                }\r\n\r\n                return false;\r\n            }\r\n        };\r\n    }\r\n\r\n    //ADDITIONAL METHODS\r\n    function fillTemplate(itemData, template) {\r\n        var invalid = false;\r\n\r\n        function replace() {\r\n            var end, start, val;\r\n\r\n            start = template.indexOf('{{');\r\n            end = template.indexOf('}}', start + 2);\r\n\r\n            if (start > -1 && end > -1) {\r\n                val = langx.trim(template.substring(start + 2, end));\r\n                val = (itemData[val] !== undefined) ? itemData[val] : '';\r\n                template = template.substring(0, start) + val + template.substring(end + 2);\r\n            } else {\r\n                invalid = true;\r\n            }\r\n        }\r\n\r\n        while (!invalid && template.search('{{') >= 0) {\r\n            replace(template);\r\n        }\r\n\r\n        return template;\r\n    }\r\n\r\n});"]}