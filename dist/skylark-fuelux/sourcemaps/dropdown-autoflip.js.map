{"version":3,"sources":["dropdown-autoflip.js"],"names":["define","langx","browser","eventer","noder","geom","$","_autoFlip","menu","css","visibility","element","$container","containerElement","targetSelector","attr","isWindow","each","parents","index","parentElement","window","overflowElement","_getContainer","measurements","parentHeight","parent","outerHeight","parentOffsetTop","offset","top","dropdownHeight","containerHeight","containerOffsetTop","scrollTop","fromTop","fromBottom","dropUpCheck","removeClass","addClass","document","on","event","this","data","flip","next","fn","dropdownautoflip"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,WACA,+BACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,GAuB3C,SAASC,EAAUC,GAElBF,EAAEE,GAAMC,KACPC,WAAY,YAgBd,SAAqBC,GAEpB,IAAIC,EAmCL,SAAuBD,GACtB,IAEIE,EAFAC,EAAiBH,EAAQI,KAAK,eAC9BC,GAAW,EAGXF,EAUwB,WAAnBA,IACRD,EAAmBP,EAAEQ,GACrBE,GAAW,GAVXf,EAAMgB,KAAKN,EAAQO,UAAW,SAAUC,EAAOC,GAC9C,GAAyC,YAArCd,EAAEc,GAAeX,IAAI,YAGxB,OAFAI,EAAmBO,EACnBJ,GAAW,GACJ,IAUNA,IACHH,EAAmBQ,QAGpB,OACEC,gBAAiBhB,EAAEO,GACnBG,SAAUA,GA9DKO,CAAcZ,GAG3Ba,KAgBJ,GAfAA,EAAaC,aAAed,EAAQe,SAASC,cAC7CH,EAAaI,gBAAkBjB,EAAQe,SAASG,SAASC,IACzDN,EAAaO,eAAiBpB,EAAQgB,cACtCH,EAAaQ,gBAAkBpB,EAAWU,gBAAgBK,cAG1DH,EAAaS,mBAAwBrB,EAAWI,SAAYJ,EAAWU,gBAAgBY,YAActB,EAAWU,gBAAgBO,SAASC,IAGzIN,EAAaW,QAAUX,EAAaI,gBAAkBJ,EAAaS,mBACnET,EAAaY,WAAaZ,EAAaQ,gBAAkBR,EAAaC,cAAgBD,EAAaI,gBAAkBJ,EAAaS,oBAK9HT,EAAaO,eAAiBP,EAAaY,WAC9C,OAAO,EACD,GAAIZ,EAAaO,eAAiBP,EAAaW,QACrD,OAAO,EACD,GAAIX,EAAaO,gBAAkBP,EAAaW,SAAWX,EAAaO,gBAAkBP,EAAaY,WAE7G,OAAIZ,EAAaW,SAAWX,EAAaY,WAvCtCC,CAAY7B,GAGfA,EAAKkB,SAASY,YAAY,UAF1B9B,EAAKkB,SAASa,SAAS,UAMxBjC,EAAEE,GAAMC,KACPC,WAAY,YA5BdJ,EAAEkC,UAAUC,GAAG,6BAA8B,oCAAqC,SAAUC,GAC/D,SAAxBpC,EAAEqC,MAAMC,OAAOC,MAElBtC,EAAUD,EAAEqC,MAAMG,KAAK,qBAKzBxC,EAAEkC,UAAUC,GAAG,uBAAwB,SAAUC,EAAO/B,GACvDJ,EAAUD,EAAEK,IACZL,EAAEK,GAASe,SAASa,SAAS,UA2F9BjC,EAAEyC,GAAGC,iBAAmB","file":"../dropdown-autoflip.js","sourcesContent":["define([\n  \"skylark-langx/langx\",\n  \"skylark-domx/browser\",\n  \"skylark-domx/eventer\",\n  \"skylark-domx/noder\",\n  \"skylark-domx/geom\",\n  \"skylark-domx/query\",\n  \"./fuelux\",\n  \"skylark-bootstrap3/dropdown\"    \n],function(langx,browser,eventer,noder,geom,$){\n\n\t/*\n\t * Fuel UX Checkbox\n\t * https://github.com/ExactTarget/fuelux\n\t *\n\t * Copyright (c) 2014 ExactTarget\n\t * Licensed under the BSD New license.\n\t */\n\n\t$(document).on('click.fu.dropdown-autoflip', '[data-toggle=dropdown][data-flip]', function (event) {\n\t\tif ($(this).data().flip === \"auto\") {\n\t\t\t// have the drop down decide where to place itself\n\t\t\t_autoFlip($(this).next('.dropdown-menu'));\n\t\t}\n\t});\n\n\t// For pillbox suggestions dropdown\n\t$(document).on('suggested.fu.pillbox', function (event, element) {\n\t\t_autoFlip($(element));\n\t\t$(element).parent().addClass('open');\n\t});\n\n\tfunction _autoFlip(menu) {\n\t\t// hide while the browser thinks\n\t\t$(menu).css({\n\t\t\tvisibility: \"hidden\"\n\t\t});\n\n\t\t// decide where to put menu\n\t\tif (dropUpCheck(menu)) {\n\t\t\tmenu.parent().addClass(\"dropup\");\n\t\t} else {\n\t\t\tmenu.parent().removeClass(\"dropup\");\n\t\t}\n\n\t\t// show again\n\t\t$(menu).css({\n\t\t\tvisibility: \"visible\"\n\t\t});\n\t}\n\n\tfunction dropUpCheck(element) {\n\t\t// caching container\n\t\tvar $container = _getContainer(element);\n\n\t\t// building object with measurementsances for later use\n\t\tvar measurements = {};\n\t\tmeasurements.parentHeight = element.parent().outerHeight();\n\t\tmeasurements.parentOffsetTop = element.parent().offset().top;\n\t\tmeasurements.dropdownHeight = element.outerHeight();\n\t\tmeasurements.containerHeight = $container.overflowElement.outerHeight();\n\n\t\t// this needs to be different if the window is the container or another element is\n\t\tmeasurements.containerOffsetTop = (!!$container.isWindow) ? $container.overflowElement.scrollTop() : $container.overflowElement.offset().top;\n\n\t\t// doing the calculations\n\t\tmeasurements.fromTop = measurements.parentOffsetTop - measurements.containerOffsetTop;\n\t\tmeasurements.fromBottom = measurements.containerHeight - measurements.parentHeight - (measurements.parentOffsetTop - measurements.containerOffsetTop);\n\n\t\t// actual determination of where to put menu\n\t\t// false = drop down\n\t\t// true = drop up\n\t\tif (measurements.dropdownHeight < measurements.fromBottom) {\n\t\t\treturn false;\n\t\t} else if (measurements.dropdownHeight < measurements.fromTop) {\n\t\t\treturn true;\n\t\t} else if (measurements.dropdownHeight >= measurements.fromTop && measurements.dropdownHeight >= measurements.fromBottom) {\n\t\t\t// decide which one is bigger and put it there\n\t\t\tif (measurements.fromTop >= measurements.fromBottom) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction _getContainer(element) {\n\t\tvar targetSelector = element.attr('data-target');\n\t\tvar isWindow = true;\n\t\tvar containerElement;\n\n\t\tif(!targetSelector) {\n\t\t\t// no selection so find the relevant ancestor\n\t\t\tlangx.each(element.parents(), function (index, parentElement) {\n\t\t\t\tif ($(parentElement).css('overflow') !== 'visible') {\n\t\t\t\t\tcontainerElement = parentElement;\n\t\t\t\t\tisWindow = false;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse if (targetSelector !== 'window') {\n\t\t\tcontainerElement = $(targetSelector);\n\t\t\tisWindow = false;\n\t\t}\n\n\t\t// fallback to window\n\t\tif (isWindow) {\n\t\t\tcontainerElement = window;\n\t\t}\n\n\t\treturn {\n\t\t\t\toverflowElement: $(containerElement),\n\t\t\t\tisWindow: isWindow\n\t\t};\n\t}\n\n\t// register empty plugin\n\t$.fn.dropdownautoflip = function () {\n\t\t/* empty */\n\t};\n\t\n\n});\n"]}